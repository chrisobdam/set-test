[{"name":"Alert","icon":"AlertIcon","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    Alert,\n    AlertTitle\n  } = window.MaterialUI.Lab;\n  const {\n    Close\n  } = window.MaterialUI.Icons;\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    IconButton\n  } = window.MaterialUI.Core;\n  const isDev = B.env === 'dev';\n  const [open, setOpen] = useState(true);\n  useEffect(() => {\n    setOpen(options.visible);\n  }, [options.visible]);\n  const AlertPanel = <Alert classes={{\n    root: classes.root\n  }} className={open || isDev ? '' : classes.hide} icon={options.icon !== 'None' ? React.createElement(Icons[options.icon]) : null} action={options.collapsable && <IconButton color=\"inherit\" size=\"small\" onClick={() => {\n    setOpen(false);\n  }}>\n              <Close />\n            </IconButton>}>\n        {options.titleText.length > 0 && <AlertTitle>\n            <B.Text value={options.titleText} />\n          </AlertTitle>}\n        <B.Text value={options.bodyText} />\n      </Alert>;\n  return isDev ? <div className={classes.wrapper}>{AlertPanel}</div> : AlertPanel;\n})()","styles":"B => theme => {\n  const style = new B.Styling(theme);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    root: {\n      '&.MuiAlert-standardSuccess': {\n        color: ({\n          options: {\n            textColor\n          }\n        }) => [style.getColor(textColor), '!important'],\n        backgroundColor: ({\n          options: {\n            background\n          }\n        }) => [style.getColor(background), '!important']\n      },\n      '& .MuiAlert-icon': {\n        color: ({\n          options: {\n            textColor\n          }\n        }) => [style.getColor(textColor), '!important']\n      },\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3])\n    },\n    hide: {\n      display: 'none !important'\n    }\n  };\n}"},{"name":"AppBar","type":"BODY_COMPONENT","allowedTypes":["CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    AppBar,\n    Toolbar,\n    IconButton,\n    Typography,\n    Menu\n  } = window.MaterialUI.Core;\n  const {\n    Menu: MenuIcon\n  } = window.MaterialUI.Icons;\n  const {\n    position,\n    title,\n    logo,\n    endpoint,\n    appBarVariant,\n    toolbarVariant,\n    square,\n    elevation\n  } = options;\n  const {\n    Link,\n    env\n  } = B;\n  const isDev = env === 'dev';\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = !!anchorEl;\n\n  const handleMenu = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const logoComponent = logo && <img src={logo} width=\"100\" alt=\"\" />;\n  const logoWithLink = endpoint.id ? // eslint-disable-next-line jsx-a11y/anchor-is-valid\n  <Link endpoint={endpoint}>{logoComponent}</Link> : logoComponent;\n  const AppBarComponent = <AppBar position={isDev ? 'static' : position} classes={{\n    root: classes.root\n  }} variant={appBarVariant} square={square} elevation={elevation}>\n        <Toolbar variant={toolbarVariant} classes={{\n      root: classes.toolbar\n    }}>\n          {logo.length > 0 && logoWithLink}\n          <Typography variant=\"h6\" noWrap className={classes.title} component={endpoint.id && Link} endpoint={endpoint.id && endpoint}>\n            {title}\n          </Typography>\n          <div className={classes.spacer} />\n          {!isDev ? <>\n              <div className={classes.collapsed}>\n                <IconButton color=\"inherit\" onClick={handleMenu}>\n                  <MenuIcon />\n                </IconButton>\n                <Menu anchorEl={anchorEl} open={open} keepMounted onClose={handleClose} classes={{\n            paper: classes.root,\n            list: classes.list\n          }}>\n                  {children}\n                </Menu>\n              </div>\n              <div className={classes.uncollapsed}>{children}</div>\n            </> : children}\n        </Toolbar>\n      </AppBar>;\n  return isDev ? <div>{AppBarComponent}</div> : AppBarComponent;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n  return {\n    root: {\n      backgroundColor: ({\n        options: {\n          backgroundColor\n        }\n      }) => [style.getColor(backgroundColor), '!important'],\n      color: ({\n        options: {\n          color\n        }\n      }) => [style.getColor(color), '!important']\n    },\n    toolbar: {\n      flexDirection: ({\n        options: {\n          alignItems\n        }\n      }) => alignItems === 'right' ? 'row' : 'row-reverse'\n    },\n    menuButton: {\n      marginLeft: style.getSpacing('M'),\n      marginRight: style.getSpacing('M')\n    },\n    title: {\n      textDecoration: 'none'\n    },\n    spacer: {\n      flexGrow: 1\n    },\n    list: {\n      '& > *': {\n        display: 'block'\n      }\n    },\n    collapsed: {\n      display: 'block',\n      [`@media ${B.mediaMinWidth(768)}`]: {\n        display: 'none'\n      }\n    },\n    uncollapsed: {\n      display: 'none',\n      [`@media ${B.mediaMinWidth(768)}`]: {\n        display: 'block'\n      }\n    }\n  };\n}"},{"name":"AutoComplete","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    label,\n    defaultValue,\n    required,\n    disabled,\n    error,\n    placeholder,\n    variant,\n    type,\n    size,\n    fullWidth,\n    margin,\n    helperText,\n    actionInputId,\n    model,\n    multiple,\n    freeSolo\n  } = options;\n  const isDev = B.env === 'dev';\n  const {\n    Autocomplete\n  } = window.MaterialUI.Lab;\n  const {\n    TextField,\n    CircularProgress,\n    Chip\n  } = window.MaterialUI.Core;\n  const {\n    ExpandMore,\n    Close\n  } = window.MaterialUI.Icons;\n  const {\n    useText,\n    getProperty,\n    getActionInput,\n    GetAll\n  } = B;\n  const [currentValue, setCurrentValue] = isDev ? useState(defaultValue.join(' ')) : useState(useText(defaultValue));\n  const placeholderText = isDev ? placeholder.join(' ') : useText(placeholder);\n  const helper = isDev ? helperText.join(' ') : useText(helperText);\n  const textFieldProps = {\n    disabled,\n    variant,\n    label,\n    fullWidth,\n    size,\n    type,\n    required,\n    error,\n    placeholder: placeholderText,\n    margin,\n    helperText: helper\n  };\n\n  if (isDev || !model) {\n    const textValue = defaultValue.map(textitem => textitem.name ? textitem.name : textitem).join(' ');\n    let inputAdornments = {\n      endAdornment: <>\n            {textValue && <Close className={classes.icon} />}\n            {!freeSolo && <ExpandMore className={classes.icon} />}\n          </>\n    };\n\n    if (multiple && textValue) {\n      inputAdornments = { ...inputAdornments,\n        startAdornment: <Chip label={textValue} onDelete={() => {}} />\n      };\n    }\n\n    return <div className={classes.root}>\n          <TextField {...textFieldProps} value={multiple ? '' : textValue} InputProps={inputAdornments} />\n        </div>;\n  }\n\n  const actionInput = getActionInput(actionInputId);\n  const value = currentValue;\n  const searchProp = options.property ? getProperty(options.property) : null;\n  const valueProp = options.valueproperty ? getProperty(options.valueproperty) : null;\n  const [searchParam, setSearchParam] = useState('');\n  const [debouncedSearchParam, setDebouncedSearchParam] = useState('');\n  const debounceDelay = 1000;\n\n  const onChange = (_, newValue) => {\n    if (!valueProp || !newValue) {\n      setCurrentValue(newValue);\n      return;\n    }\n\n    let newCurrentValue = newValue[valueProp.name];\n\n    if (multiple) {\n      newCurrentValue = newValue.map(rec => rec[valueProp.name]);\n    }\n\n    setCurrentValue(newCurrentValue);\n  };\n\n  const getDefaultValue = records => {\n    if (!value) {\n      return multiple ? [] : null;\n    }\n\n    let currentRecordsKeys = value;\n\n    if (!Array.isArray(value)) {\n      currentRecordsKeys = multiple ? value.toString().split(',') : [value];\n    }\n\n    const currentRecords = records.reduce((acc, cv) => {\n      const searchStr = cv[valueProp.name].toString();\n      const search = cv[valueProp.name];\n\n      if (currentRecordsKeys.indexOf(searchStr) > -1 || currentRecordsKeys.indexOf(search) > -1) {\n        acc.push(cv);\n      }\n\n      return acc;\n    }, []);\n    const singleRecord = currentRecords[0] ? { ...currentRecords[0]\n    } : null;\n    return multiple ? currentRecords : singleRecord;\n  };\n\n  const {\n    filter\n  } = options;\n\n  if (searchProp && debouncedSearchParam !== '') {\n    filter[searchProp.id] = {\n      regex: debouncedSearchParam\n    };\n  } else if (searchProp && debouncedSearchParam === '') {\n    delete filter[searchProp.id];\n  }\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedSearchParam(searchParam);\n    }, debounceDelay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [searchParam]);\n  return <GetAll modelId={model} filter={filter} skip={0} take={50}>\n        {({\n      loading,\n      error: errorResp,\n      data\n    }) => {\n      if (errorResp) {\n        return <span>Something went wrong: {errorResp.message} :(</span>;\n      }\n\n      let reason = 'No data';\n\n      if (!searchProp || !valueProp) {\n        reason = 'No property selected';\n      }\n\n      if (!data || !searchProp || !valueProp) {\n        return <TextField {...textFieldProps} defaultValue={reason} disabled InputProps={{\n          endAdornment: <CircularProgress color=\"inherit\" size={20} />\n        }} />;\n      }\n\n      return <Autocomplete multiple={multiple} freeSolo={freeSolo} options={data.results} defaultValue={getDefaultValue(data.results)} getOptionLabel={option => option[searchProp.name] && option[searchProp.name].toString()} onInputChange={(_, inputValue) => {\n        if (!freeSolo) {\n          return;\n        }\n\n        setSearchParam(inputValue);\n      }} onChange={onChange} renderInput={params => <>\n                  <input type=\"hidden\" name={actionInput && actionInput.name} value={value} />\n                  <TextField {...params} {...textFieldProps} loading={loading} InputProps={{ ...params.InputProps,\n          endAdornment: <>\n                          {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                          {params.InputProps.endAdornment}\n                        </>\n        }} />\n                </>} />;\n    }}\n      </GetAll>;\n})()","styles":"() => () => ({\n  root: {\n    display: ({\n      options: {\n        fullWidth\n      }\n    }) => fullWidth ? 'block' : 'inline-block',\n    '& > *': {\n      pointerEvents: 'none'\n    }\n  },\n  icon: {\n    '&.MuiSvgIcon-root': {\n      color: 'rgba(0, 0, 0, 0.54)',\n      fontSize: '1.25rem'\n    }\n  }\n})"},{"name":"Box","icon":"ContainerIcon","type":"CONTAINER_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    Box\n  } = window.MaterialUI.Core;\n  const isDev = B.env === 'dev';\n  const {\n    alignment\n  } = options;\n  const isEmpty = children.length === 0;\n  const ButtonGroup = isEmpty ? <div className={classes.empty}>Box</div> : <Box display=\"flex\" flexDirection=\"row\" justifyContent={alignment}>\n        {children}\n      </Box>;\n  return isDev ? <div className={classes.wrapper}>{ButtonGroup}</div> : ButtonGroup;\n})()","styles":"() => () => ({\n  empty: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '2.5rem',\n    fontSize: '0.75rem',\n    color: '#262A3A',\n    textTransform: 'uppercase',\n    borderWidth: '0.0625rem',\n    borderColor: '#AFB5C8',\n    borderStyle: 'dashed',\n    backgroundColor: '#F0F1F5'\n  }\n})"},{"name":"BreadcrumbItem","icon":"BreadcrumbItemIcon","type":"BREADCRUMB_ITEM","allowedTypes":[],"orientation":"VERTICAL","jsx":"(() => {\n  const isDev = B.env === 'dev';\n  const {\n    Link,\n    useText\n  } = B;\n  const {\n    endpoint,\n    breadcrumbContent\n  } = options;\n  const content = isDev ? breadcrumbContent.join(' ') : useText(breadcrumbContent);\n  const breadcrumbItem = // eslint-disable-next-line jsx-a11y/anchor-is-valid\n  <Link className={classes.link} endpoint={endpoint}>\n        {content}\n      </Link>;\n  return isDev ? <div>{breadcrumbItem}</div> : breadcrumbItem;\n})()","styles":"() => () => ({\n  link: {\n    color: 'black',\n    textDecoration: 'none'\n  }\n})"},{"name":"Breadcrumbs","type":"CONTAINER_COMPONENT","allowedTypes":["BREADCRUMB_ITEM"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const isDev = B.env === 'dev';\n  const {\n    Breadcrumbs\n  } = window.MaterialUI.Core;\n  const breadcrumbs = children.length || !isDev ? <Breadcrumbs separator={options.separator} aria-label=\"breadcrumb\">\n          {children}\n        </Breadcrumbs> : 'Breadcrumbs';\n  return isDev ? <div>{breadcrumbs}</div> : breadcrumbs;\n})()","styles":"() => () => ({})"},{"name":"Button","icon":"ButtonIcon","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"VERTICAL","jsx":"(() => {\n  const {\n    Button,\n    IconButton,\n    CircularProgress\n  } = window.MaterialUI.Core;\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    variant,\n    disabled,\n    fullWidth,\n    size,\n    icon,\n    iconPosition,\n    linkType,\n    linkTo,\n    linkToExternal,\n    type,\n    visible,\n    actionId,\n    buttonText\n  } = options;\n  const isDev = B.env === 'dev';\n  const isAction = linkType === 'action';\n  const generalProps = {\n    disabled,\n    size,\n    href: linkType === 'external' ? linkToExternal : undefined,\n    component: linkType === 'internal' ? B.Link : undefined,\n    endpoint: linkType === 'internal' ? linkTo : undefined\n  };\n  const iconButtonProps = { ...generalProps,\n    classes: {\n      root: classes.root\n    },\n    classname: visible || isDev ? '' : classes.hide\n  };\n  const buttonProps = { ...generalProps,\n    fullWidth,\n    variant,\n    [`${iconPosition}Icon`]: icon !== 'None' ? React.createElement(Icons[icon]) : undefined,\n    classes: {\n      root: classes.root,\n      contained: classes.contained,\n      outlined: classes.outlined\n    },\n    className: [visible || isDev ? '' : classes.hide, buttonText.length === 0 ? classes.empty : ''].join(' '),\n    type: isDev ? 'button' : type\n  };\n  let ButtonComponent = variant === 'icon' ? <IconButton {...iconButtonProps}>\n          {React.createElement(Icons[icon === 'None' ? 'Error' : icon], {\n      fontSize: size\n    })}\n        </IconButton> : <Button {...buttonProps}>{buttonText}</Button>;\n  const Loader = <CircularProgress size={16} className={classes.loader} />;\n\n  if (isAction) {\n    ButtonComponent = <B.Action actionId={actionId}>\n          {(callAction, {\n        loading\n      }) => {\n        const onClickAction = event => {\n          event.preventDefault();\n          if (!isDev && !loading && linkType === 'action') callAction();\n        };\n\n        const actionClickHandler = isAction && {\n          onClick: onClickAction\n        };\n        return variant === 'icon' ? <IconButton {...iconButtonProps} {...actionClickHandler}>\n                {loading ? Loader : React.createElement(Icons[icon === 'None' ? 'Error' : icon], {\n            fontSize: size\n          })}\n              </IconButton> : <Button {...buttonProps} {...actionClickHandler}>\n                {buttonText}\n                {loading && Loader}\n              </Button>;\n      }}\n        </B.Action>;\n  }\n\n  return isDev ? <div className={classes.wrapper}>{ButtonComponent}</div> : ButtonComponent;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    wrapper: {\n      display: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth ? 'block' : 'inline-block',\n      width: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth && '100%',\n      minHeight: '1rem',\n      '& > *': {\n        pointerEvents: 'none'\n      }\n    },\n    root: {\n      color: ({\n        options: {\n          variant,\n          textColor,\n          background\n        }\n      }) => [style.getColor(variant === 'icon' ? background : textColor), '!important'],\n      '&.MuiButton-root, &.MuiIconButton-root': {\n        width: ({\n          options: {\n            fullWidth,\n            outerSpacing\n          }\n        }) => {\n          if (!fullWidth) return 'auto';\n          const marginRight = getSpacing(outerSpacing[1]);\n          const marginLeft = getSpacing(outerSpacing[3]);\n          return `calc(100% - ${marginRight} - ${marginLeft})`;\n        },\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0]),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1]),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2]),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3]),\n        [`@media ${B.mediaMinWidth(768)}`]: {\n          width: ({\n            options: {\n              fullWidth,\n              outerSpacing\n            }\n          }) => {\n            if (!fullWidth) return 'auto';\n            const marginRight = getSpacing(outerSpacing[1], 'Portrait');\n            const marginLeft = getSpacing(outerSpacing[3], 'Portrait');\n            return `calc(100% - ${marginRight} - ${marginLeft})`;\n          },\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Portrait'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Portrait'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Portrait'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Portrait')\n        },\n        [`@media ${B.mediaMinWidth(1024)}`]: {\n          width: ({\n            options: {\n              fullWidth,\n              outerSpacing\n            }\n          }) => {\n            if (!fullWidth) return 'auto';\n            const marginRight = getSpacing(outerSpacing[1], 'Landscape');\n            const marginLeft = getSpacing(outerSpacing[3], 'Landscape');\n            return `calc(100% - ${marginRight} - ${marginLeft})`;\n          },\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Landscape'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Landscape'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Landscape'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Landscape')\n        },\n        [`@media ${B.mediaMinWidth(1200)}`]: {\n          width: ({\n            options: {\n              fullWidth,\n              outerSpacing\n            }\n          }) => {\n            if (!fullWidth) return 'auto';\n            const marginRight = getSpacing(outerSpacing[1], 'Desktop');\n            const marginLeft = getSpacing(outerSpacing[3], 'Desktop');\n            return `calc(100% - ${marginRight} - ${marginLeft})`;\n          },\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Desktop'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Desktop'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Desktop'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Desktop')\n        }\n      }\n    },\n    contained: {\n      backgroundColor: ({\n        options: {\n          background\n        }\n      }) => [style.getColor(background), '!important']\n    },\n    outlined: {\n      borderColor: ({\n        options: {\n          background\n        }\n      }) => [style.getColor(background), '!important']\n    },\n    loader: {\n      color: ({\n        options: {\n          variant,\n          textColor,\n          background\n        }\n      }) => [style.getColor(variant === 'icon' ? background : textColor), '!important'],\n      marginLeft: '0.25rem'\n    },\n    empty: {\n      '&::before': {\n        content: '\"\\xA0\"'\n      }\n    },\n    hide: {\n      display: 'none'\n    }\n  };\n}"},{"name":"Card","type":"CONTAINER_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT","CARD_MEDIA","CARD_ACTIONS","CARD_CONTENT"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    Card\n  } = window.MaterialUI.Core;\n  const {\n    raised,\n    variant\n  } = options;\n  const isDev = B.env === 'dev';\n  const isPristine = children.length === 0 && isDev;\n  const PlaceHolder = <div className={classes.empty}>Card</div>;\n  const CardComponent = <Card variant={variant} raised={raised}>\n        {isPristine ? PlaceHolder : children}\n      </Card>;\n  return isDev ? <div>{CardComponent}</div> : CardComponent;\n})()","styles":"() => () => ({\n  empty: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: '4rem',\n    height: '100%',\n    width: '100%',\n    fontSize: '0.75rem',\n    color: '#262A3A',\n    textTransform: 'uppercase',\n    boxSizing: 'border-box',\n    borderWidth: '0.0625rem',\n    borderColor: '#AFB5C8',\n    borderStyle: 'dashed',\n    backgroundColor: '#F0F1F5'\n  }\n})"},{"name":"CardActions","type":"CARD_ACTIONS","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    CardActions\n  } = window.MaterialUI.Core;\n  const isDev = B.env === 'dev';\n  const isPristine = children.length === 0 && isDev;\n  const PlaceHolder = <div className={classes.empty}>Card Content</div>;\n  const CardActionsComponent = <CardActions classes={{\n    root: classes.root\n  }}>\n        {isPristine ? PlaceHolder : children}\n      </CardActions>;\n  return isDev ? <div>{CardActionsComponent}</div> : CardActionsComponent;\n})()","styles":"() => () => ({\n  root: {\n    flexDirection: 'column',\n    '&.MuiCardActions-root': {\n      alignItems: ({\n        options: {\n          alignment\n        }\n      }) => alignment\n    }\n  },\n  empty: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: '4rem',\n    height: '100%',\n    width: '100%',\n    fontSize: '0.75rem',\n    color: '#262A3A',\n    textTransform: 'uppercase',\n    boxSizing: 'border-box'\n  },\n  pristine: {\n    borderWidth: '0.0625rem',\n    borderColor: '#AFB5C8',\n    borderStyle: 'dashed',\n    backgroundColor: '#F0F1F5'\n  }\n})"},{"name":"CardContent","type":"CARD_CONTENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    CardContent\n  } = window.MaterialUI.Core;\n  const isDev = B.env === 'dev';\n  const isPristine = children.length === 0 && isDev;\n  const PlaceHolder = <div className={classes.empty}>Card Content</div>;\n  const CardContentComponent = <CardContent>{isPristine ? PlaceHolder : children}</CardContent>;\n  return isDev ? <div>{CardContentComponent}</div> : CardContentComponent;\n})()","styles":"() => () => ({\n  empty: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: '4rem',\n    height: '100%',\n    width: '100%',\n    fontSize: '0.75rem',\n    color: '#262A3A',\n    textTransform: 'uppercase',\n    boxSizing: 'border-box',\n    borderWidth: '0.0625rem',\n    borderColor: '#AFB5C8',\n    borderStyle: 'dashed',\n    backgroundColor: '#F0F1F5'\n  }\n})"},{"name":"CardMedia","type":"CARD_MEDIA","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    CardMedia\n  } = window.MaterialUI.Core;\n  const isDev = B.env === 'dev';\n  const {\n    image,\n    title\n  } = options;\n  const cardMedia = <CardMedia className={classes.root} image={image} title={title} component=\"img\" />;\n  return isDev ? <div>{cardMedia}</div> : cardMedia;\n})()","styles":"() => () => ({\n  root: {\n    minHeight: '1.875rem'\n  }\n})"},{"name":"Checkbox","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    label,\n    disabled,\n    defaultValue,\n    error,\n    required,\n    position,\n    size,\n    helperText,\n    actionInputId\n  } = options;\n  const {\n    useText,\n    getActionInput\n  } = B;\n  const isDev = B.env === 'dev';\n  let componentLabel = label.map(l => l.name ? l.name : l).join(' ');\n  let componentValue = defaultValue.map(v => v.name ? v.name : v).join(' ');\n  let componentHelperText = helperText.map(h => h.name ? h.name : h).join(' ');\n  const actionInput = getActionInput(actionInputId);\n\n  if (!isDev) {\n    componentLabel = useText(label);\n    componentValue = useText(defaultValue);\n    componentHelperText = useText(helperText);\n  }\n\n  const [value, setValue] = useState({\n    value: componentValue\n  });\n  const {\n    Checkbox: MUICheckbox,\n    FormControlLabel,\n    FormControl,\n    FormHelperText\n  } = window.MaterialUI.Core;\n\n  const handleChange = evt => {\n    setValue({\n      value: evt.target.value\n    });\n  };\n\n  const Checkbox = <MUICheckbox value={value} onChange={handleChange} name={actionInput && actionInput.name} disabled={disabled} size={size} />;\n  const Control = <FormControl required={required} error={error}>\n        <FormControlLabel control={Checkbox} label={componentLabel} labelPlacement={position} />\n        {!!componentHelperText && <FormHelperText>{componentHelperText}</FormHelperText>}\n      </FormControl>;\n  return isDev ? <div className={classes.root}>{Control}</div> : Control;\n})()","styles":"() => () => ({\n  root: {\n    '& > *': {\n      pointerEvents: 'none'\n    }\n  }\n})"},{"name":"Chip","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    Chip,\n    Avatar\n  } = window.MaterialUI.Core;\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    env,\n    useText\n  } = B;\n  const {\n    label,\n    disabled,\n    variant,\n    startIcon,\n    avatar,\n    avatartype,\n    size\n  } = options;\n  const isDev = env === 'dev';\n  const AvatarImage = <Avatar alt=\"\" src={avatar} />;\n  const AvatarText = <Avatar>{avatar}</Avatar>;\n  const AvatarComponent = avatartype === 'text' ? AvatarText : AvatarImage;\n  const ChipComponent = <Chip className={[classes.root, variant === 'default' ? classes.chip : classes.outlined].join(' ')} label={isDev ? label.map(l => l.name ? l.name : l).join(' ') : useText(label)} disabled={disabled} variant={variant} icon={startIcon !== 'None' ? React.createElement(Icons[startIcon]) : undefined} avatar={avatar && AvatarComponent} size={size} />;\n  return isDev ? <div className={classes.wrapper}>{ChipComponent}</div> : ChipComponent;\n})()","styles":"B => theme => {\n  const style = new B.Styling(theme);\n\n  const convertSizes = sizes => sizes.map(size => style.getSpacing(size)).join(' ');\n\n  return {\n    wrapper: {\n      display: 'inline-block'\n    },\n    root: {\n      margin: ({\n        options: {\n          margin\n        }\n      }) => convertSizes(margin),\n      color: ({\n        options: {\n          textColor\n        }\n      }) => [style.getColor(textColor), '!important'],\n      '& .MuiChip-icon': {\n        color: ({\n          options: {\n            textColor\n          }\n        }) => [style.getColor(textColor), '!important']\n      }\n    },\n    chip: {\n      backgroundColor: ({\n        options: {\n          color\n        }\n      }) => [style.getColor(color), '!important']\n    },\n    outlined: {\n      backgroundColor: 'transparent !important',\n      '&.MuiChip-outlined': {\n        borderColor: ({\n          options: {\n            color\n          }\n        }) => [style.getColor(color), '!important']\n      }\n    }\n  };\n}"},{"name":"Column","icon":"ColumnIcon","type":"LAYOUT_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"VERTICAL","jsx":"<div className={[classes.column, options.show || B.env === 'dev' ? '' : classes.hide].join(' ')}>\n      {(() => {\n    const isEmpty = children.length === 0;\n    const isPristine = isEmpty && B.env === 'dev';\n    return children.length !== 0 ? children : <div className={[isEmpty ? classes.empty : '', isPristine ? classes.pristine : ''].join(' ')}>\n            {isPristine ? 'Column' : ''}\n          </div>;\n  })()}\n    </div>","styles":"B => theme => {\n  const style = new B.Styling(theme);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    column: {\n      display: ({\n        options: {\n          columnWidthMobile,\n          horizontalAlignment,\n          verticalAlignment\n        }\n      }) => {\n        if (columnWidthMobile === 'hidden') {\n          return 'none';\n        }\n\n        return horizontalAlignment === 'inherit' && verticalAlignment === 'inherit' ? 'block' : 'flex';\n      },\n      flexDirection: 'column',\n      justifyContent: ({\n        options: {\n          verticalAlignment\n        }\n      }) => verticalAlignment,\n      alignItems: ({\n        options: {\n          horizontalAlignment\n        }\n      }) => horizontalAlignment,\n      flexGrow: ({\n        options: {\n          columnWidthMobile\n        }\n      }) => columnWidthMobile === 'flexible' ? 1 : 0,\n      flexShrink: ({\n        options: {\n          columnWidthMobile\n        }\n      }) => columnWidthMobile === 'flexible' || columnWidthMobile === 'fitContent' ? 1 : 0,\n      flexBasis: ({\n        options: {\n          columnWidthMobile,\n          outerSpacing\n        }\n      }) => {\n        if (columnWidthMobile === 'flexible' || columnWidthMobile === 'fitContent') {\n          return 'auto';\n        }\n\n        const marginRight = getSpacing(outerSpacing[1]);\n        const marginLeft = getSpacing(outerSpacing[3]);\n        return `calc(${columnWidthMobile / 12 * 100}% - ${marginRight} - ${marginLeft})`;\n      },\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      paddingTop: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[0]),\n      paddingRight: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[1]),\n      paddingBottom: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[2]),\n      paddingLeft: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[3]),\n      height: ({\n        options: {\n          columnHeight\n        }\n      }) => columnHeight,\n      minHeight: 1,\n      backgroundColor: ({\n        options: {\n          backgroundColor\n        }\n      }) => backgroundColor === 'transparent' ? 'transparent' : style.getColor(backgroundColor),\n      backgroundImage: 'none',\n      backgroundPosition: 'left top',\n      backgroundRepeat: 'no-repeat',\n      backgroundSize: 'cover',\n      borderWidth: 0,\n      borderColor: 'transparent',\n      borderStyle: 'none',\n      borderRadius: 0,\n      overflow: 'auto',\n      boxSizing: 'border-box',\n      [`@media ${B.mediaMinWidth(768)}`]: {\n        display: ({\n          options: {\n            columnWidthTabletPortrait,\n            horizontalAlignment,\n            verticalAlignment\n          }\n        }) => {\n          if (columnWidthTabletPortrait === 'hidden') {\n            return 'none';\n          }\n\n          return horizontalAlignment === 'inherit' && verticalAlignment === 'inherit' ? 'block' : 'flex';\n        },\n        flexGrow: ({\n          options: {\n            columnWidthTabletPortrait\n          }\n        }) => columnWidthTabletPortrait === 'flexible' ? 1 : 0,\n        flexShrink: ({\n          options: {\n            columnWidthTabletPortrait\n          }\n        }) => columnWidthTabletPortrait === 'flexible' || columnWidthTabletPortrait === 'fitContent' ? 1 : 0,\n        flexBasis: ({\n          options: {\n            columnWidthTabletPortrait,\n            outerSpacing\n          }\n        }) => {\n          if (columnWidthTabletPortrait === 'flexible' || columnWidthTabletPortrait === 'fitContent') {\n            return 'auto';\n          }\n\n          const marginRight = getSpacing(outerSpacing[1], 'Portrait');\n          const marginLeft = getSpacing(outerSpacing[3], 'Portrait');\n          return `calc(${columnWidthTabletPortrait / 12 * 100}% - ${marginRight} - ${marginLeft})`;\n        },\n        maxWidth: '100%',\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Portrait'),\n        paddingTop: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[0], 'Portrait'),\n        paddingRight: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[1], 'Portrait'),\n        paddingBottom: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[2], 'Portrait'),\n        paddingLeft: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[3], 'Portrait')\n      },\n      [`@media ${B.mediaMinWidth(1024)}`]: {\n        display: ({\n          options: {\n            columnWidthTabletLandscape,\n            horizontalAlignment,\n            verticalAlignment\n          }\n        }) => {\n          if (columnWidthTabletLandscape === 'hidden') {\n            return 'none';\n          }\n\n          return horizontalAlignment === 'inherit' && verticalAlignment === 'inherit' ? 'block' : 'flex';\n        },\n        flexGrow: ({\n          options: {\n            columnWidthTabletLandscape\n          }\n        }) => columnWidthTabletLandscape === 'flexible' ? 1 : 0,\n        flexShrink: ({\n          options: {\n            columnWidthTabletLandscape\n          }\n        }) => columnWidthTabletLandscape === 'flexible' || columnWidthTabletLandscape === 'fitContent' ? 1 : 0,\n        flexBasis: ({\n          options: {\n            columnWidthTabletLandscape,\n            outerSpacing\n          }\n        }) => {\n          if (columnWidthTabletLandscape === 'flexible' || columnWidthTabletLandscape === 'fitContent') {\n            return 'auto';\n          }\n\n          const marginRight = getSpacing(outerSpacing[1], 'Landscape');\n          const marginLeft = getSpacing(outerSpacing[3], 'Landscape');\n          return `calc(${columnWidthTabletLandscape / 12 * 100}% - ${marginRight} - ${marginLeft})`;\n        },\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Landscape'),\n        paddingTop: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[0], 'Landscape'),\n        paddingRight: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[1], 'Landscape'),\n        paddingBottom: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[2], 'Landscape'),\n        paddingLeft: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[3], 'Landscape')\n      },\n      [`@media ${B.mediaMinWidth(1200)}`]: {\n        display: ({\n          options: {\n            columnWidth,\n            horizontalAlignment,\n            verticalAlignment\n          }\n        }) => {\n          if (columnWidth === 'hidden') {\n            return 'none';\n          }\n\n          return horizontalAlignment === 'inherit' && verticalAlignment === 'inherit' ? 'block' : 'flex';\n        },\n        flexGrow: ({\n          options: {\n            columnWidth\n          }\n        }) => columnWidth === 'flexible' ? 1 : 0,\n        flexShrink: ({\n          options: {\n            columnWidth\n          }\n        }) => columnWidth === 'flexible' || columnWidth === 'fitContent' ? 1 : 0,\n        flexBasis: ({\n          options: {\n            columnWidth,\n            outerSpacing\n          }\n        }) => {\n          if (columnWidth === 'flexible' || columnWidth === 'fitContent') {\n            return 'auto';\n          }\n\n          const marginRight = getSpacing(outerSpacing[1], 'Desktop');\n          const marginLeft = getSpacing(outerSpacing[3], 'Desktop');\n          return `calc(${columnWidth / 12 * 100}% - ${marginRight} - ${marginLeft})`;\n        },\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Desktop'),\n        paddingTop: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[0], 'Desktop'),\n        paddingRight: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[1], 'Desktop'),\n        paddingBottom: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[2], 'Desktop'),\n        paddingLeft: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[3], 'Desktop')\n      }\n    },\n    empty: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: ({\n        options: {\n          columnHeight\n        }\n      }) => columnHeight ? 0 : '4rem',\n      height: '100%',\n      width: '100%',\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase',\n      boxSizing: 'border-box'\n    },\n    pristine: {\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5'\n    },\n    hide: {\n      display: 'none !important'\n    }\n  };\n}"},{"name":"DataContainer","icon":"DataContainer","type":"CONTAINER_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"<div>\n      {(() => {\n    const isEmpty = children.length === 0;\n    const isDev = B.env === 'dev';\n    const isPristine = isEmpty && isDev;\n    const {\n      filter,\n      model\n    } = options;\n\n    const builderLayout = () => <>\n            <div className={[isEmpty ? classes.empty : '', isPristine ? classes.pristine : ''].join(' ')}>\n              {isPristine ? 'Data Container' : children}\n            </div>\n          </>;\n\n    const canvasLayout = () => {\n      if (!model) {\n        return builderLayout();\n      }\n\n      return <B.GetAll modelId={model} filter={filter} skip={0} take={1}>\n              {({\n          loading,\n          error,\n          data\n        }) => {\n          if (loading) return 'loading...';\n          if (error) return 'failed';\n          const item = data.results[0];\n          return <>\n                    {item && <B.GetOneProvider key={item.id} value={item}>\n                        {children}\n                      </B.GetOneProvider>}\n                  </>;\n        }}\n            </B.GetAll>;\n    };\n\n    return isDev ? builderLayout() : canvasLayout();\n  })()}\n    </div>","styles":"() => () => ({\n  header: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    flexDirection: 'row-reverse',\n    minHeight: '4rem',\n    width: '100%'\n  },\n  searchWrapper: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: [0, '0.5rem'],\n    borderBottom: [1, 'solid', '#000']\n  },\n  searchIcon: {\n    fontSize: '1.25rem',\n    marginRight: '1rem'\n  },\n  search: {\n    padding: ['0.25rem', 0],\n    fontSize: '1rem',\n    border: 'none',\n    outline: 'none'\n  },\n  button: {\n    background: 'transparent',\n    border: 'none',\n    display: 'inline-block',\n    padding: 0,\n    margin: 0,\n    cursor: 'pointer',\n    '&:active': {\n      outline: 'none'\n    }\n  },\n  footer: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: ['0.75rem', 0]\n  },\n  placeholder: {\n    opacity: '0.4'\n  },\n  pagination: {\n    marginLeft: '1rem'\n  },\n  arrow: {\n    padding: '1rem',\n    fontSize: '1.625rem',\n    color: '#000',\n    textDecoration: 'none'\n  },\n  arrowDisabled: {\n    color: '#ccc'\n  },\n  empty: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: '4rem',\n    height: '100%',\n    width: '100%',\n    fontSize: '0.75rem',\n    color: '#262A3A',\n    textTransform: 'uppercase',\n    boxSizing: 'border-box'\n  },\n  pristine: {\n    borderWidth: '0.0625rem',\n    borderColor: '#AFB5C8',\n    borderStyle: 'dashed',\n    backgroundColor: '#F0F1F5'\n  }\n})"},{"name":"DataList","icon":"DataList","type":"CONTAINER_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"<div className={classes.root}>\n      {(() => {\n    const [page, setPage] = useState(1);\n    const [search, setSearch] = useState('');\n    const [isTyping, setIsTyping] = useState(false);\n    const {\n      filter\n    } = options;\n    const take = parseInt(options.take, 10) || 50;\n    const searchProp = B.getProperty(options.searchProperty);\n    const isEmpty = children.length === 0;\n    const isDev = B.env === 'dev';\n    const isPristine = isEmpty && isDev;\n\n    const builderLayout = () => <>\n            {options.searchProperty && <div className={classes.header}>\n                <Search name={B.env === 'dev' ? '[property]' : searchProp.name} search={search} />\n              </div>}\n            <div className={[isEmpty ? classes.empty : '', isPristine ? classes.pristine : ''].join(' ')}>\n              {isPristine ? 'Data List' : children}\n            </div>\n            {Array.from(Array(take - 1).keys()).map(key => <div key={key} className={[isDev ? classes.pristine : '', classes.empty, classes.placeholder].join(' ')}>\n                {isDev ? 'Dynamic Item' : ''}\n              </div>)}\n            <div className={classes.footer}>\n              {(isDev || options.model) && <Pagination totalCount={0} resultCount={take} currentPage={1} />}\n            </div>\n          </>;\n\n    const canvasLayout = () => {\n      if (!options.model) {\n        return builderLayout();\n      }\n\n      return <B.GetAll modelId={options.model} filter={searchProp && search !== '' ? { ...filter,\n        [searchProp.id]: {\n          matches: search\n        }\n      } : filter} skip={page ? (page - 1) * take : 0} take={take}>\n              {({\n          loading,\n          error,\n          data\n        }) => {\n          if (loading) return 'loading...';\n          if (error) return 'failed';\n          return <>\n                    <div className={classes.header}>\n                      {searchProp && <Search name={searchProp.name} search={search} isTyping={isTyping} setSearch={setSearch} setIsTyping={setIsTyping} />}\n                    </div>\n                    {data.results.map(item => <B.GetOneProvider key={item.id} value={item}>\n                        {children}\n                      </B.GetOneProvider>)}\n                    <div className={classes.footer}>\n                      {!isEmpty && <Pagination totalCount={data.totalCount} resultCount={data.results.length} currentPage={page} />}\n                    </div>\n                  </>;\n        }}\n            </B.GetAll>;\n    };\n    /* SubComponents */\n    // eslint-disable-next-line no-shadow\n\n\n    function Search({\n      name,\n      search,\n      isTyping,\n      setIsTyping\n    }) {\n      const inputRef = React.createRef();\n      React.useEffect(() => {\n        if (isTyping) {\n          inputRef.current.focus();\n        }\n      });\n      return <div className={classes.searchWrapper}>\n              <i className={[classes.searchIcon, 'zmdi zmdi-search'].join(' ')} />\n              <input className={classes.search} type=\"text\" value={search} onChange={({\n          target: {\n            value\n          }\n        }) => setSearch(value)} ref={inputRef} onFocus={() => setIsTyping(true)} onBlur={() => setIsTyping(false)} placeholder={`Search on ${name}`} />\n            </div>;\n    }\n\n    function Pagination({\n      totalCount,\n      resultCount,\n      currentPage\n    }) {\n      const firstItem = currentPage ? (currentPage - 1) * take : 0;\n      useEffect(() => {\n        const totalPages = Math.ceil(totalCount / take);\n\n        if (currentPage > totalPages) {\n          setPage(totalPages);\n        }\n      }, [totalCount]);\n      const totalText = B.env === 'dev' ? '[total]' : totalCount;\n      return <>\n              <span>\n                {firstItem + 1}\n                {firstItem + 1 !== totalCount && ` - ${firstItem + resultCount}`}{' '}\n                of {totalText}\n              </span>\n              <div className={classes.pagination}>\n                {typeof currentPage !== 'undefined' && currentPage > 1 ? <button className={classes.button} type=\"button\" onClick={() => setPage(v => v - 1)}>\n                    <span className={[classes.arrow, 'zmdi zmdi-chevron-left'].join(' ')} />\n                  </button> : <span className={[classes.arrow, classes.arrowDisabled, 'zmdi zmdi-chevron-left'].join(' ')} />}\n                {(typeof currentPage === 'undefined' ? 1 : currentPage) < totalCount / take ? <button className={classes.button} type=\"button\" onClick={() => setPage(v => v + 1)}>\n                    <span className={[classes.arrow, 'zmdi zmdi-chevron-right'].join(' ')} />\n                  </button> : <span className={[classes.arrow, classes.arrowDisabled, 'zmdi zmdi-chevron-right'].join(' ')} />}\n              </div>\n            </>;\n    }\n\n    return isDev ? builderLayout() : canvasLayout();\n  })()}\n    </div>","styles":"B => theme => {\n  const style = new B.Styling(theme);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    root: {\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3])\n    },\n    header: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      flexDirection: 'row-reverse',\n      width: '100%'\n    },\n    searchWrapper: {\n      display: 'flex',\n      alignItems: 'center',\n      padding: [0, '0.5rem'],\n      borderBottom: [1, 'solid', '#000'],\n      minHeight: '4rem'\n    },\n    searchIcon: {\n      fontSize: '1.25rem',\n      marginRight: '1rem'\n    },\n    search: {\n      padding: ['0.25rem', 0],\n      fontSize: '1rem',\n      border: 'none',\n      outline: 'none'\n    },\n    button: {\n      background: 'transparent',\n      border: 'none',\n      display: 'inline-block',\n      padding: 0,\n      margin: 0,\n      cursor: 'pointer',\n      '&:active': {\n        outline: 'none'\n      }\n    },\n    footer: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'flex-end',\n      padding: ['0.75rem', 0]\n    },\n    placeholder: {\n      opacity: '0.4'\n    },\n    pagination: {\n      marginLeft: '1rem'\n    },\n    arrow: {\n      padding: '1rem',\n      fontSize: '1.625rem',\n      color: '#000',\n      textDecoration: 'none'\n    },\n    arrowDisabled: {\n      color: '#ccc'\n    },\n    [`@media ${B.mediaMinWidth(768)}`]: {\n      root: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Portrait')\n      }\n    },\n    [`@media ${B.mediaMinWidth(1024)}`]: {\n      root: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Landscape')\n      }\n    },\n    [`@media ${B.mediaMinWidth(1200)}`]: {\n      root: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Desktop')\n      }\n    },\n    empty: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: '4rem',\n      height: '100%',\n      width: '100%',\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase',\n      boxSizing: 'border-box'\n    },\n    pristine: {\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5'\n    }\n  };\n}"},{"name":"DataTable","icon":"DataTable","type":"CONTENT_COMPONENT","allowedTypes":["DATATABLE_COLUMN"],"orientation":"HORIZONTAL","jsx":"<div className={classes.root}>\n      {(() => {\n    const {\n      env,\n      getProperty,\n      GetAll,\n      Link,\n      Children\n    } = B;\n    const {\n      filter\n    } = options;\n    const take = parseInt(options.take, 10) || 50;\n\n    if (env === 'dev') {\n      const repeaterRef = React.createRef();\n      const tableRef = React.createRef();\n\n      const repeat = () => {\n        if (!repeaterRef.current) {\n          return;\n        }\n\n        if (repeaterRef.current.previousElementSibling.children.length === 0) {\n          return;\n        }\n\n        repeaterRef.current.innerHTML = '';\n\n        for (let i = 0, j = take - 1; i < j; i += 1) {\n          repeaterRef.current.innerHTML += repeaterRef.current.previousElementSibling.children[1].outerHTML;\n        }\n      };\n\n      React.useEffect(() => {\n        const mutationObserver = new MutationObserver(() => {\n          repeat();\n        });\n        mutationObserver.observe(tableRef.current, {\n          attributes: true,\n          characterData: true,\n          childList: true,\n          subtree: true,\n          attributeOldValue: false,\n          characterDataOldValue: false\n        });\n        repeat();\n      });\n      return <>\n              {options.searchProperty && <div className={[classes.tableHeader, classes.noEvents].join(' ')}>\n                  {options.searchProperty && <Search name=\"{property}\" search=\"\" isTyping=\"\" setIsTyping=\"\" />}\n                </div>}\n              <div className={classes.table}>\n                <div className={classes.row}>\n                  <Children headerOnly>{children}</Children>\n                </div>\n                <div ref={tableRef} className={classes.row}>\n                  <Children>{children}</Children>\n                </div>\n              </div>\n              <div ref={repeaterRef} className={classes.autoRow} />\n              <div className={classes.tableFooter}>\n                <Pagination totalCount={15} resultCount={parseInt(options.take, 10)} />\n              </div>\n            </>;\n    }\n\n    if (!options.model) {\n      return <>\n              {options.searchProperty && <div className={[classes.tableHeader, classes.noEvents].join(' ')}>\n                  {options.searchProperty && <Search name=\"{property}\" search=\"\" isTyping=\"\" setIsTyping=\"\" />}\n                </div>}\n              <div className={classes.table}>\n                <div className={classes.row}>\n                  <Children headerOnly>{children}</Children>\n                </div>\n                {Array.from(Array(take).keys()).map(rowKey => <div key={rowKey} className={classes.row}>\n                    <Children>{children}</Children>\n                  </div>)}\n              </div>\n              <div className={classes.tableFooter}>\n                <Pagination totalCount={15} resultCount={parseInt(options.take, 10)} />\n              </div>\n            </>;\n    }\n\n    const [isTyping, setIsTyping] = useState(false);\n    const {\n      location: {\n        search: querystring = ''\n      },\n      history\n    } = useRouter();\n    const queryParams = new URLSearchParams(querystring);\n    const searchParam = queryParams.get('search') || '';\n    const searchProp = getProperty(options.searchProperty);\n    const page = parseInt(queryParams.get('page'), 10) || undefined;\n    const field = queryParams.get('sort') || '';\n    const order = queryParams.get('order') || '';\n    const variables = Object.assign(order && {\n      sort: {\n        field,\n        order: order.toUpperCase()\n      }\n    });\n    return <>\n            {searchProp && <div className={classes.tableHeader}>\n                <Search name={searchProp.name} search={searchParam} isTyping={isTyping} setIsTyping={setIsTyping} />\n              </div>}\n            <GetAll modelId={options.model} filter={searchProp && searchParam !== '' ? { ...filter,\n        [searchProp.id]: {\n          matches: searchParam\n        }\n      } : filter} __SECRET_VARIABLES_DO_NOT_USE={variables} skip={page ? (page - 1) * take : 0} take={take}>\n              {({\n          loading,\n          error,\n          data\n        }) => {\n          if (loading) {\n            return <LoadingTable numberOfItems={take} />;\n          }\n\n          if (error) {\n            return <EmptyTable text=\"Something went terribly wrong\" />;\n          }\n\n          const {\n            totalCount,\n            results\n          } = data;\n\n          if (results.length === 0) {\n            return <EmptyTable text=\"No results\" />;\n          }\n\n          return <>\n                    <div className={classes.table}>\n                      <div className={classes.row}>\n                        <Children location={location} history={history} page={page} order={order} field={field} index={index} headerOnly>\n                          {children}\n                        </Children>\n                      </div>\n                      {results.map((value, index) => <div key={value[0]} className={classes.row}>\n                          <Children location={location} history={history} page={page} order={order} field={field} index={index} value={value}>\n                            {children}\n                          </Children>\n                        </div>)}\n                    </div>\n                    <div className={classes.tableFooter}>\n                      <Pagination totalCount={totalCount} resultCount={results.length} search={searchParam} />\n                    </div>\n                  </>;\n        }}\n            </GetAll>\n          </>; // eslint-disable-next-line no-shadow\n\n    function Search({\n      name,\n      search,\n      isTyping,\n      setIsTyping\n    }) {\n      const inputRef = React.createRef();\n      const {\n        location: {\n          pathname\n        }\n      } = useRouter();\n      React.useEffect(() => {\n        if (isTyping) {\n          inputRef.current.focus();\n        }\n      });\n      return <div className={classes.searchWrapper}>\n              <i className={[classes.searchIcon, 'zmdi zmdi-search'].join(' ')} />\n              <input className={classes.search} type=\"text\" defaultValue={search} onChange={({\n          target: {\n            value\n          }\n        }) => history.push(`${pathname}?search=${value}`)} ref={inputRef} onFocus={() => setIsTyping(true)} onBlur={() => setIsTyping(false)} placeholder={`Search on ${name}`} />\n            </div>;\n    }\n\n    function EmptyTable({\n      text\n    }) {\n      return <div className={classes.table}>\n              <div className={classes.row}>\n                <div className={classes.column}>{text}</div>\n              </div>\n            </div>;\n    }\n\n    function LoadingTable({\n      numberOfItems\n    }) {\n      const skeletonHeadingClass = [classes.skeleton, classes.skeletonHeading].join(' ');\n      return <>\n              <div className={classes.table}>\n                <div className={classes.row}>\n                  <div className={[classes.column, classes.columnHeading].join(' ')}>\n                    <div className={skeletonHeadingClass} />\n                  </div>\n                  <div className={[classes.column, classes.columnHeading].join(' ')}>\n                    <div className={skeletonHeadingClass} />\n                  </div>\n                  <div className={[classes.column, classes.columnHeading].join(' ')}>\n                    <div className={skeletonHeadingClass} />\n                  </div>\n                </div>\n                {Array.from(Array(numberOfItems).keys()).map(idx => <div key={idx} className={classes.row}>\n                    <div className={classes.column}>\n                      <div className={classes.skeleton} />\n                    </div>\n                    <div className={classes.column}>\n                      <div className={classes.skeleton} />\n                    </div>\n                    <div className={classes.column}>\n                      <div className={classes.skeleton} />\n                    </div>\n                  </div>)}\n              </div>\n\n              <div className={classes.tableFooter}>\n                <span className={classes.paginationInfoSkeleton} />\n                <div className={classes.paginationSkeleton}>\n                  <div className={classes.arrowSkeleton} />\n                  <div className={classes.arrowSkeleton} />\n                </div>\n              </div>\n            </>;\n    }\n\n    function Pagination({\n      totalCount,\n      resultCount,\n      search\n    }) {\n      const {\n        location: {\n          pathname\n        }\n      } = useRouter();\n      const firstItem = page ? (page - 1) * take : 0;\n      return <>\n              <span>\n                {firstItem + 1}\n                {firstItem + 1 !== totalCount && ` - ${firstItem + resultCount}`}{' '}\n                of {totalCount}\n              </span>\n              <div className={classes.pagination}>\n                {typeof page !== 'undefined' && page > 1 ? <Link className={[classes.arrow, 'zmdi zmdi-chevron-left'].join(' ')} to={[pathname, '?', page ? `page=${page - 1}&` : '', search ? `search=${search}&` : '', field ? `sort=${field}&` : '', order ? `order=${order}` : ''].join('')} /> : <span className={[classes.arrow, classes.arrowDisabled, 'zmdi zmdi-chevron-left'].join(' ')} />}\n                {(typeof page === 'undefined' ? 1 : page) < totalCount / take ? <Link className={[classes.arrow, 'zmdi zmdi-chevron-right'].join(' ')} to={[pathname, '?', page ? `page=${page + 1}&` : 'page=2&', search ? `search=${search}&` : '', field ? `sort=${field}&` : '', order ? `order=${order}` : ''].join('')} /> : <span className={[classes.arrow, classes.arrowDisabled, 'zmdi zmdi-chevron-right'].join(' ')} />}\n              </div>\n            </>;\n    }\n  })()}\n    </div>","styles":"B => theme => {\n  const style = new B.Styling(theme);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    root: {\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3])\n    },\n    noEvents: {\n      pointerEvents: 'none'\n    },\n    tableHeader: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'flex-end'\n    },\n    searchWrapper: {\n      display: 'flex',\n      alignItems: 'center',\n      padding: [0, '0.5rem'],\n      borderBottom: [1, 'solid', '#000'],\n      minHeight: '4rem'\n    },\n    searchIcon: {\n      fontSize: '1.25rem',\n      marginRight: '1rem'\n    },\n    search: {\n      padding: ['0.25rem', 0],\n      fontSize: '1rem',\n      border: 'none',\n      outline: 'none'\n    },\n    table: {\n      display: 'table',\n      width: '100%',\n      borderCollapse: 'collapse',\n      tableLayout: 'fixed',\n      '& $row:first-child > div': {\n        borderBottom: `0.125rem solid ${style.getColor('Accent1')}`\n      }\n    },\n    row: {\n      display: 'table-row'\n    },\n    autoRow: {\n      display: 'table',\n      width: '100%',\n      borderCollapse: 'collapse',\n      tableLayout: 'fixed',\n      position: 'relative',\n      pointerEvents: 'none',\n      '& > *': {\n        pointerEvents: 'none'\n      },\n      '&::after': {\n        content: '\"\"',\n        display: 'block',\n        pointerEvents: 'none',\n        position: 'absolute',\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0,\n        backgroundColor: 'rgba(255,255,255,0.3)'\n      }\n    },\n    column: {\n      display: 'table-cell',\n      padding: '0.75rem 1rem 0.75rem 0',\n      fontFamily: style.getFontFamily('Body1'),\n      fontSize: style.getFontSize('Body1'),\n      fontWeight: style.getFontWeight('Body1'),\n      textTransform: style.getTextTransform('Body1'),\n      letterSpacing: style.getLetterSpacing('Body1'),\n      color: style.getFontColor('Body1'),\n      borderBottom: `0.0625rem solid ${style.getColor('Accent1')}`,\n      [`@media ${B.mediaMinWidth(768)}`]: {\n        fontSize: style.getFontSize('Body1', 'Portrait')\n      },\n      [`@media ${B.mediaMinWidth(1024)}`]: {\n        fontSize: style.getFontSize('Body1', 'Landscape')\n      },\n      [`@media ${B.mediaMinWidth(1200)}`]: {\n        fontSize: style.getFontSize('Body1', 'Desktop')\n      }\n    },\n    columnHeading: {\n      fontFamily: style.getFont('Body2').fontFamily,\n      fontSize: style.getFont('Body2').Mobile,\n      fontWeight: style.getFont('Body2').fontWeight,\n      textTransform: style.getFont('Body2').textTransform,\n      letterSpacing: style.getFont('Body2').letterSpacing,\n      lineHeight: '1.2',\n      color: style.getFont('Body2').color,\n      [`@media ${B.mediaMinWidth(768)}`]: {\n        fontSize: style.getFont('Body2').Portrait\n      },\n      [`@media ${B.mediaMinWidth(1024)}`]: {\n        fontSize: style.getFont('Body2').Landscape\n      },\n      [`@media ${B.mediaMinWidth(1200)}`]: {\n        fontSize: style.getFont('Body2').Desktop\n      },\n      borderBottomWidth: '0.125rem'\n    },\n    columnHeadingLink: {\n      display: 'flex',\n      alignItems: 'center',\n      color: style.getFont('Body2').color,\n      whiteSpace: 'nowrap',\n      textDecoration: 'none'\n    },\n    columnHeadingIcon: {\n      position: 'relative',\n      top: '0.0625rem',\n      margin: [0, '0.5rem']\n    },\n    skeleton: {\n      height: `calc(${style.getFont('Body1').Mobile} * 1.2)`,\n      [`@media ${B.mediaMinWidth(768)}`]: {\n        height: `calc(${style.getFont('Body1').Portrait} * 1.2)`\n      },\n      [`@media ${B.mediaMinWidth(1024)}`]: {\n        height: `calc(${style.getFont('Body1').Landscape} * 1.2)`\n      },\n      [`@media ${B.mediaMinWidth(1200)}`]: {\n        height: `calc(${style.getFont('Body1').Desktop} * 1.2)`\n      }\n    },\n    skeletonHeading: {\n      height: `calc(${style.getFont('Body2').Mobile} * 1.15)`,\n      [`@media ${B.mediaMinWidth(768)}`]: {\n        height: `calc(${style.getFont('Body2').Portrait} * 1.15)`\n      },\n      [`@media ${B.mediaMinWidth(1024)}`]: {\n        height: `calc(${style.getFont('Body2').Landscape} * 1.15)`\n      },\n      [`@media ${B.mediaMinWidth(1200)}`]: {\n        height: `calc(${style.getFont('Body2').Desktop} * 1.15)`\n      },\n      backgroundColor: '#eee',\n      borderRadius: 8,\n      overflow: 'hidden',\n      '&::after': {\n        display: 'block',\n        width: '100%',\n        height: '100%',\n        backgroundImage: 'linear-gradient(90deg, #eee 25%, #fff 50%, #eee 75%)',\n        backgroundSize: '200% 100%',\n        backgroundRepeat: 'no-repeat',\n        backgroundPositionX: '150%',\n        borderRadius: `calc(${style.getFont('Body2').Landscape} / 2)`,\n        content: '\"\"',\n        animation: 'loading 1.5s infinite'\n      }\n    },\n    '@keyframes loading': {\n      to: {\n        backgroundPositionX: '-150%'\n      }\n    },\n    tableFooter: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'flex-end',\n      padding: ['0.75rem', 0]\n    },\n    paginationInfoSkeleton: {\n      height: 'calc(1rem * 1.2)',\n      width: 100,\n      backgroundColor: '#eee',\n      borderRadius: 'calc(1rem / 2)',\n      '&::after': {\n        display: 'block',\n        width: '100%',\n        height: '100%',\n        backgroundImage: 'linear-gradient(90deg, #eee 25%, #fff 50%, #eee 75%)',\n        backgroundSize: '200% 100%',\n        backgroundRepeat: 'no-repeat',\n        backgroundPositionX: '150%',\n        borderRadius: 'calc(1rem / 2)',\n        content: '\"\"',\n        animation: 'loading 1.5s infinite'\n      }\n    },\n    pagination: {\n      marginLeft: '1rem'\n    },\n    paginationSkeleton: {\n      marginLeft: '1rem'\n    },\n    arrow: {\n      padding: '1rem',\n      fontSize: '1.625rem',\n      color: '#000',\n      textDecoration: 'none'\n    },\n    arrowDisabled: {\n      color: '#ccc'\n    },\n    arrowSkeleton: {\n      display: 'inline-block',\n      height: 'calc(1.625rem * 1.2)',\n      width: 'calc(1.625rem * 1.2)',\n      margin: '0.75rem 0.375rem',\n      backgroundColor: '#eee',\n      borderRadius: '50%',\n      '&::after': {\n        display: 'block',\n        width: '100%',\n        height: '100%',\n        backgroundImage: 'linear-gradient(90deg, #eee 25%, #fff 50%, #eee 75%)',\n        backgroundSize: '200% 100%',\n        backgroundRepeat: 'no-repeat',\n        backgroundPositionX: '150%',\n        borderRadius: '50%',\n        content: '\"\"',\n        animation: 'loading 1.5s infinite'\n      }\n    },\n    [`@media ${B.mediaMinWidth(768)}`]: {\n      root: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Portrait')\n      }\n    },\n    [`@media ${B.mediaMinWidth(1024)}`]: {\n      root: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Landscape')\n      }\n    },\n    [`@media ${B.mediaMinWidth(1200)}`]: {\n      root: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Desktop')\n      }\n    }\n  };\n}"},{"name":"DataTableColumn","icon":"DataTableColumnIcon","type":"DATATABLE_COLUMN","allowedTypes":["CONTENT_COMPONENT"],"orientation":"VERTICAL","jsx":"<div className={classes.column}>\n      {(() => {\n    const {\n      value,\n      page,\n      order,\n      field,\n      headerOnly\n    } = parent || {};\n    const {\n      env,\n      GetOneProvider,\n      getProperty,\n      Link\n    } = B;\n\n    if (env === 'dev') {\n      if (headerOnly) {\n        const headerText = options.headerText.length === 0 && options.property ? '{property}' : options.headerText;\n        return <>\n                <div className={classes.heading}>\n                  <span className={classes.columnHeadingLink}>\n                    {headerText}\n                    {options.property && <i className={[classes.columnHeadingIcon, order === 'desc' ? 'zmdi zmdi-long-arrow-up' : 'zmdi zmdi-long-arrow-down'].join(' ')} />}\n                  </span>\n                </div>\n              </>;\n      }\n\n      return <>\n              <div className={classes.content}>{children}</div>\n            </>;\n    }\n\n    function TableHeading({\n      heading,\n      search\n    }) {\n      const {\n        location: {\n          pathname\n        }\n      } = useRouter();\n      const to = [pathname, '?', page ? `page=${page}&` : '', search ? `search=${search}&` : '', `sort=${heading}&`, order && field === heading ? `order=${order === 'desc' ? 'asc' : 'desc'}` : 'order=asc'].join('');\n      const headingText = options.headerText.length > 0 ? options.headerText : heading.split('').map((char, charIndex) => {\n        const charUppercased = char.toUpperCase();\n\n        if (charIndex === 0) {\n          return charUppercased;\n        }\n\n        if (char === charUppercased) {\n          return ` ${char.toLowerCase()}`;\n        }\n\n        return char;\n      }).join('');\n      return <Link key={heading} to={to} className={classes.columnHeadingLink}>\n              {headingText}\n              <i className={[classes.columnHeadingIcon, field === heading && (order === 'desc' ? 'zmdi zmdi-long-arrow-up' : 'zmdi zmdi-long-arrow-down')].join(' ')} />\n            </Link>;\n    }\n\n    const propertyName = options.property ? getProperty(options.property) && getProperty(options.property).name : '';\n    const searchParam = '';\n    return <>\n            {headerOnly ? <>\n                <div className={classes.heading}>\n                  {propertyName && <TableHeading heading={propertyName} search={searchParam} />}\n                  {!propertyName && options.headerText}\n                </div>\n              </> : <div className={classes.content}>\n                <GetOneProvider value={value}>{children}</GetOneProvider>\n              </div>}\n          </>;\n  })()}\n    </div>","styles":"B => theme => {\n  const {\n    env,\n    Styling\n  } = B;\n  const style = new Styling(theme);\n  return {\n    column: {\n      display: 'table-cell',\n      fontFamily: style.getFontFamily('Body1'),\n      fontSize: style.getFontSize('Body1'),\n      fontWeight: style.getFontWeight('Body1'),\n      textTransform: style.getTextTransform('Body1'),\n      textAlign: ({\n        options: {\n          horizontalAlignment\n        }\n      }) => horizontalAlignment,\n      letterSpacing: style.getLetterSpacing('Body1'),\n      color: style.getFontColor('Body1'),\n      borderBottom: `0.0625rem solid ${style.getColor('Accent1')}`,\n      pointerEvents: ({\n        parent\n      }) => parent && parent.headerOnly && env === 'dev' ? 'none' : null,\n      [`@media ${B.mediaMinWidth(768)}`]: {\n        fontSize: style.getFontSize('Body1', 'Portrait')\n      },\n      [`@media ${B.mediaMinWidth(1024)}`]: {\n        fontSize: style.getFontSize('Body1', 'Landscape')\n      },\n      [`@media ${B.mediaMinWidth(1200)}`]: {\n        fontSize: style.getFontSize('Body1', 'Desktop')\n      }\n    },\n    heading: {\n      padding: '0.75rem 1rem 0.75rem 0',\n      boxSizing: 'border-box',\n      color: ({\n        options: {\n          type\n        }\n      }) => style.getFontColor(type),\n      fontFamily: ({\n        options: {\n          type\n        }\n      }) => style.getFontFamily(type),\n      fontSize: ({\n        options: {\n          type\n        }\n      }) => style.getFontSize(type),\n      fontWeight: ({\n        options: {\n          type\n        }\n      }) => style.getFontWeight(type),\n      textTransform: ({\n        options: {\n          type\n        }\n      }) => style.getTextTransform(type),\n      letterSpacing: ({\n        options: {\n          type\n        }\n      }) => style.getLetterSpacing(type),\n      lineHeight: '1.2',\n      [`@media ${B.mediaMinWidth(768)}`]: {\n        fontSize: ({\n          options: {\n            type\n          }\n        }) => style.getFontSize(type, 'Portrait')\n      },\n      [`@media ${B.mediaMinWidth(1024)}`]: {\n        fontSize: ({\n          options: {\n            type\n          }\n        }) => style.getFontSize(type, 'Landscape')\n      },\n      [`@media ${B.mediaMinWidth(1200)}`]: {\n        fontSize: ({\n          options: {\n            type\n          }\n        }) => style.getFontSize(type, 'Desktop')\n      }\n    },\n    content: {\n      padding: '0.75rem 1rem 0.75rem 0'\n    },\n    columnHeadingLink: {\n      display: 'inline-flex',\n      alignItems: 'center',\n      whiteSpace: 'nowrap',\n      textDecoration: 'none',\n      color: ({\n        options: {\n          type\n        }\n      }) => style.getFontColor(type)\n    },\n    columnHeadingIcon: {\n      position: 'relative',\n      top: '0.0625rem',\n      margin: [0, '0.5rem'],\n      fontSize: style.getFont('Body2').Mobile,\n      fontWeight: style.getFont('Body2').fontWeight,\n      textTransform: style.getFont('Body2').textTransform,\n      letterSpacing: style.getFont('Body2').letterSpacing,\n      lineHeight: '1.2',\n      color: style.getFont('Body2').color\n    }\n  };\n}"},{"name":"DateTimePicker","icon":"DateTimePickerIcon","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    label,\n    defaultValue,\n    required,\n    disabled,\n    error,\n    placeholder,\n    variant,\n    inputvariant,\n    type,\n    dateFormat,\n    timeFormat,\n    dateTimeFormat,\n    size,\n    fullWidth,\n    margin,\n    helperText,\n    actionInputId,\n    disableToolbar\n  } = options;\n  const {\n    MuiPickersUtilsProvider,\n    KeyboardTimePicker,\n    KeyboardDatePicker,\n    KeyboardDateTimePicker\n  } = window.MaterialUI.Pickers;\n  const {\n    DateFnsUtils\n  } = window.MaterialUI;\n  const {\n    getActionInput,\n    useText\n  } = B;\n  const isDev = B.env === 'dev';\n  const actionInput = getActionInput(actionInputId);\n  const strDefaultValue = defaultValue.join(' ');\n  const [selectedDate, setSelectedDate] = isDev ? useState(strDefaultValue) : useState(useText(defaultValue));\n  const helper = isDev ? helperText.join(' ') : useText(helperText);\n  const placeholderText = isDev ? placeholder.join(' ') : useText(placeholder);\n\n  const isValidDate = date => date instanceof Date && !isNaN(date);\n\n  const changeHandler = date => {\n    setSelectedDate(date);\n  };\n\n  const pad = value => {\n    if (value < 10) {\n      return `0${value}`;\n    }\n\n    return value;\n  };\n\n  let DateTimeComponent = KeyboardDatePicker;\n  let format = dateFormat || 'MM/dd/yyyy';\n  let devValue = isValidDate(new Date(strDefaultValue)) ? new Date(strDefaultValue) : new Date();\n  let prodValue = isValidDate(new Date(selectedDate)) ? new Date(selectedDate) : new Date();\n\n  if (type === 'datetime') {\n    DateTimeComponent = KeyboardDateTimePicker;\n    format = dateTimeFormat || 'MM/dd/yyyy HH:mm:ss';\n  }\n\n  if (type === 'time') {\n    DateTimeComponent = KeyboardTimePicker;\n    format = timeFormat || 'HH:mm:ss';\n    const today = new Date();\n    const year = today.getFullYear();\n    const month = pad(today.getMonth() + 1);\n    const day = pad(today.getDate());\n    const dateString = `${year}-${month}-${day}T`;\n    const selectedDateInDateFormat = isValidDate(selectedDate) ? selectedDate : new Date(`${dateString}${selectedDate}`);\n    devValue = defaultValue.length > 0 ? new Date(`${dateString}${strDefaultValue}`) : new Date(`${dateString}00:00:00`);\n    prodValue = !isDev ? selectedDateInDateFormat : devValue;\n  }\n\n  const DateTimeCmp = <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <DateTimeComponent name={actionInput && actionInput.name} value={isDev ? devValue : prodValue} size={size} variant={variant} placeholder={placeholderText} fullWidth={fullWidth} onChange={changeHandler} inputVariant={inputvariant} inputProps={{\n      name: actionInput && actionInput.name\n    }} required={required} disabled={disabled} label={label} error={error} margin={margin} helperText={helper} disableToolbar={disableToolbar} format={format} />\n      </MuiPickersUtilsProvider>;\n  return isDev ? <div className={classes.root}>{DateTimeCmp}</div> : DateTimeCmp;\n})()","styles":"() => () => ({\n  root: {\n    display: ({\n      options: {\n        fullWidth\n      }\n    }) => fullWidth ? 'block' : 'inline-block',\n    '& > *': {\n      pointerEvents: 'none'\n    }\n  }\n})"},{"name":"Divider","icon":"HorizontalRuleIcon","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"<div className={classes.root}>\n      <div className={B.env === 'dev' ? classes.clickSpace : ''}>\n        <hr className={classes.divider} />\n      </div>\n    </div>","styles":"B => t => {\n  const style = new B.Styling(t);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    root: {\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      width: ({\n        options: {\n          outerSpacing\n        }\n      }) => `calc(100% - ${getSpacing(outerSpacing[1])} - ${getSpacing(outerSpacing[3])})`,\n      [`@media ${B.mediaMinWidth(768)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Portrait'),\n        width: ({\n          options: {\n            outerSpacing\n          }\n        }) => `calc(100% - ${getSpacing(outerSpacing[1], 'Portrait')} - ${getSpacing(outerSpacing[3], 'Portrait')})`\n      },\n      [`@media ${B.mediaMinWidth(1024)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Landscape'),\n        width: ({\n          options: {\n            outerSpacing\n          }\n        }) => `calc(100% - ${getSpacing(outerSpacing[1], 'Landscape')} - ${getSpacing(outerSpacing[3], 'Landscape')})`\n      },\n      [`@media ${B.mediaMinWidth(1200)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Desktop'),\n        width: ({\n          options: {\n            outerSpacing\n          }\n        }) => `calc(100% - ${getSpacing(outerSpacing[1], 'Desktop')} - ${getSpacing(outerSpacing[3], 'Desktop')})`\n      }\n    },\n    clickSpace: {\n      padding: '0.25rem 0'\n    },\n    divider: {\n      height: ({\n        options: {\n          thickness\n        }\n      }) => style.getBorderSize(thickness),\n      margin: 0,\n      backgroundColor: ({\n        options: {\n          color\n        }\n      }) => style.getColor(color),\n      border: 'none'\n    }\n  };\n}"},{"name":"Form","icon":"FormIcon","type":"CONTAINER_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"<div>\n      {(() => {\n    const {\n      Action,\n      Children\n    } = B;\n    const {\n      actionId,\n      model,\n      filter,\n      formErrorMessage,\n      formSuccessMessage\n    } = options;\n    const formRef = React.createRef();\n    const empty = children.length === 0;\n    const isDev = B.env === 'dev';\n    const isPristine = empty && isDev;\n    return <Action actionId={actionId}>\n            {(callAction, {\n        data,\n        loading,\n        error\n      }) => <>\n                <div className={classes.messageContainer}>\n                  {error && <span className={classes.error}>{formErrorMessage}</span>}\n                  {data && <span className={classes.success}>\n                      {formSuccessMessage}\n                    </span>}\n                </div>\n\n                <form onSubmit={event => {\n          event.preventDefault();\n          const formData = new FormData(formRef.current);\n          const entries = Array.from(formData);\n          const values = entries.reduce((acc, currentvalue) => {\n            const key = currentvalue[0];\n            const value = currentvalue[1];\n            return { ...acc,\n              [key]: value\n            };\n          }, {});\n          callAction({\n            variables: {\n              input: values\n            }\n          });\n        }} ref={formRef} className={[empty && classes.empty, isPristine && classes.pristine].join(' ')}>\n                  {isPristine && <span>form</span>}\n                  {!model || isDev ? <Children loading={loading}>{children}</Children> : <B.GetAll modelId={model} filter={filter} skip={0} take={1}>\n                      {({\n              loading: dataLoading,\n              error: dataError,\n              data: modelData\n            }) => {\n              if (dataLoading) return 'Loading...';\n              if (dataError) return 'Failed';\n              const item = modelData.results[0];\n              return <>\n                            <B.GetOneProvider key={item.id} value={item}>\n                              {children}\n                            </B.GetOneProvider>\n                          </>;\n            }}\n                    </B.GetAll>}\n                </form>\n              </>}\n          </Action>;\n  })()}\n    </div>","styles":"B => t => {\n  const style = new B.Styling(t);\n  return {\n    error: {\n      color: style.getColor('Danger')\n    },\n    success: {\n      color: style.getColor('Success')\n    },\n    messageContainer: {\n      marginBottom: '0.5rem'\n    },\n    empty: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: ({\n        options: {\n          columnHeight\n        }\n      }) => columnHeight ? 0 : '4rem',\n      height: '100%',\n      width: '100%',\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase',\n      boxSizing: 'border-box'\n    },\n    pristine: {\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5'\n    }\n  };\n}"},{"name":"Icon","icon":"ContainerIcon","category":"CONTENT","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"VERTICAL","jsx":"(() => {\n  const {\n    Icons\n  } = window.MaterialUI;\n  const isDev = B.env === 'dev';\n  const {\n    icon\n  } = options;\n  const IconComponent = React.createElement(Icons[icon], {\n    className: classes.root\n  });\n  return isDev ? <span className={classes.wrapper}>{IconComponent}</span> : IconComponent;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n  return {\n    wrapper: {\n      display: 'inline-block'\n    },\n    root: {\n      '&.MuiSvgIcon-root': {\n        [`@media ${B.mediaMinWidth(768)}`]: {\n          fontSize: ({\n            options: {\n              type\n            }\n          }) => style.getFontSize(type, 'Portrait')\n        },\n        [`@media ${B.mediaMinWidth(1024)}`]: {\n          fontSize: ({\n            options: {\n              type\n            }\n          }) => style.getFontSize(type, 'Landscape')\n        },\n        [`@media ${B.mediaMinWidth(1200)}`]: {\n          fontSize: ({\n            options: {\n              type\n            }\n          }) => style.getFontSize(type, 'Desktop')\n        }\n      }\n    }\n  };\n}"},{"name":"Image","icon":"ImageIcon","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"VERTICAL","jsx":"<figure className={[classes.figure, !options.imgUrl ? classes.empty : ''].join(' ')}>\n      {options.imgUrl ? <img className={classes.image} src={options.imgUrl} alt={options.imgAlt ? options.imgAlt : ' '} /> : <div className={classes.placeholderWrapper}>\n          <svg className={classes.placeholder} viewBox=\"0 0 86 48\">\n            <rect x=\"19.5\" y=\"8.5\" rx=\"2\" />\n            <path d=\"M61.1349945 29.020979v3.9160839H25v-2.5379375l6.5998225-4.9892478 5.6729048 4.2829541 13.346858-11.2981564L61.1349945 29.020979zm-22.5-10.270979c0 1.0416667-.3645833 1.9270833-1.09375 2.65625S35.9266612 22.5 34.8849945 22.5s-1.9270833-.3645833-2.65625-1.09375-1.09375-1.6145833-1.09375-2.65625.3645833-1.9270833 1.09375-2.65625S33.8433278 15 34.8849945 15s1.9270833.3645833 2.65625 1.09375 1.09375 1.6145833 1.09375 2.65625z\" />\n          </svg>\n        </div>}\n    </figure>","styles":"B => t => {\n  const style = new B.Styling(t);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    figure: {\n      fontSize: 0,\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      boxSizing: 'border-box',\n      overflow: 'hidden'\n    },\n    empty: {\n      position: 'relative',\n      width: '100%',\n      backgroundColor: '#F0F1F5',\n      border: '0.0625rem dashed #AFB5C8',\n      paddingBottom: ({\n        options: {\n          imgUrl\n        }\n      }) => !imgUrl && '62.5%'\n    },\n    image: {\n      width: '100%',\n      height: 'auto'\n    },\n    placeholderWrapper: {\n      position: 'absolute',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    },\n    placeholder: {\n      maxHeight: '100%',\n      width: 86,\n      height: 48,\n      '& > rect': {\n        stroke: '#AFB5C8',\n        fill: '#F7F8FA',\n        width: 47,\n        height: 31\n      },\n      '& > path': {\n        fill: '#666D85'\n      }\n    },\n    [`@media ${B.mediaMinWidth(768)}`]: {\n      figure: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Portrait')\n      }\n    },\n    [`@media ${B.mediaMinWidth(1024)}`]: {\n      figure: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Landscape')\n      }\n    },\n    [`@media ${B.mediaMinWidth(1200)}`]: {\n      figure: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Desktop')\n      }\n    }\n  };\n}"},{"name":"Panel","icon":"PanelIcon","type":"CONTAINER_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"<div className={classes.panel}>\n      {(() => {\n    const isEmpty = children.length === 0;\n    const isPristine = isEmpty && B.env === 'dev';\n    return <>\n            {options.panelTitle && <div className={classes.title}>\n                <B.Text value={options.panelTitle} />\n              </div>}\n            <div className={[classes.content, isEmpty ? classes.empty : '', isPristine ? classes.pristine : ''].join(' ')}>\n              {isPristine ? 'Panel' : children}\n            </div>\n          </>;\n  })()}\n    </div>","styles":"B => theme => {\n  const style = new B.Styling(theme);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    panel: {\n      display: 'flex',\n      flexDirection: 'column',\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      height: 'auto',\n      minHeight: 1,\n      backgroundColor: 'transparent',\n      borderWidth: '0.125rem',\n      borderColor: ({\n        options: {\n          panelColor\n        }\n      }) => style.getColor(panelColor) || style.getColor('Primary'),\n      borderStyle: 'solid',\n      borderRadius: '0.125rem',\n      overflow: 'auto',\n      boxSizing: 'border-box'\n    },\n    title: {\n      margin: '0',\n      display: 'block',\n      paddingRight: '0.5rem',\n      paddingLeft: '0.5rem',\n      paddingTop: '0.4375rem',\n      paddingBottom: '0.5625rem',\n      fontFamily: style.getFontFamily('Body1'),\n      fontSize: '1rem',\n      fontWeight: style.getFontWeight('Body1'),\n      textTransform: style.getTextTransform('Body1'),\n      letterSpacing: style.getLetterSpacing('Body1'),\n      color: ({\n        options: {\n          color\n        }\n      }) => style.getColor(color) || style.getColor('White'),\n      backgroundColor: ({\n        options: {\n          panelColor\n        }\n      }) => style.getColor(panelColor) || style.getColor('Primary'),\n      borderBottomWidth: '0.125rem',\n      borderBottomColor: ({\n        options: {\n          panelColor\n        }\n      }) => style.getColor(panelColor) || style.getColor('Primary'),\n      borderBottomStyle: 'solid'\n    },\n    content: {\n      flexGrow: 1,\n      flexBasis: '100%',\n      paddingTop: getSpacing('M'),\n      paddingRight: getSpacing('M'),\n      paddingBottom: getSpacing('M'),\n      paddingLeft: getSpacing('M')\n    },\n    [`@media ${B.mediaMinWidth(768)}`]: {\n      panel: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Portrait')\n      },\n      title: {\n        paddingRight: getSpacing('M', 'Portrait'),\n        paddingLeft: getSpacing('M', 'Portrait'),\n        fontSize: style.getFontSize('Body1', 'Portrait')\n      },\n      content: {\n        paddingTop: getSpacing('M', 'Portrait')\n      }\n    },\n    [`@media ${B.mediaMinWidth(1024)}`]: {\n      panel: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Landscape')\n      },\n      title: {\n        paddingRight: getSpacing('M', 'Landscape'),\n        paddingLeft: getSpacing('M', 'Landscape'),\n        fontSize: style.getFontSize('Body1', 'Landscape')\n      },\n      content: {\n        padding: getSpacing('M', 'Landscape')\n      }\n    },\n    [`@media ${B.mediaMinWidth(1200)}`]: {\n      panel: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Desktop')\n      },\n      title: {\n        paddingRight: getSpacing('M', 'Desktop'),\n        paddingLeft: getSpacing('M', 'Desktop'),\n        fontSize: style.getFontSize('Body1', 'Desktop')\n      },\n      content: {\n        padding: getSpacing('M', 'Desktop')\n      }\n    },\n    empty: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: () => 'center',\n      minHeight: '4rem',\n      height: '100%',\n      margin: '1rem',\n      fontSize: '0.75rem'\n    },\n    pristine: {\n      color: '#262A3A',\n      textTransform: 'uppercase',\n      boxSizing: 'border-box',\n      border: '0.0625rem dashed #AFB5C8',\n      backgroundColor: '#F0F1F5'\n    }\n  };\n}"},{"name":"Partial","type":"CONTAINER_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"<div className={classes.root}>\n      {(() => {\n    const {\n      env,\n      getPartial\n    } = B;\n\n    if (env === 'prod') {\n      const {\n        partialReferenceId\n      } = options;\n      const partial = getPartial(partialReferenceId);\n\n      if (partial) {\n        const {\n          asset\n        } = partial;\n        return React.createElement( // eslint-disable-next-line\n        React.lazy(() => System.import(`./assets/partials/${asset}`)));\n      }\n    }\n\n    return <div className={classes.root}>{children}</div>;\n  })()}\n    </div>","styles":"() => () => ({\n  root: {\n    boxSizing: 'border-box',\n    position: 'relative',\n    display: 'flex',\n    width: '100%'\n  }\n})"},{"name":"RadioGroup","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    label,\n    required,\n    disabled,\n    defaultValue,\n    row,\n    helperText,\n    radioOptions,\n    model,\n    optionType,\n    labelProp,\n    valueProp,\n    actionInputId,\n    size,\n    position,\n    margin,\n    error,\n    filter\n  } = options;\n  const isDev = B.env === 'dev';\n  const {\n    GetAll,\n    getProperty,\n    useText,\n    getActionInput\n  } = B;\n  const labelProperty = getProperty(labelProp);\n  const valueProperty = getProperty(valueProp);\n  const actionInput = getActionInput(actionInputId);\n  let componentValue = defaultValue.map(v => v.name ? v.name : v).join(' ');\n  let componentHelperText = helperText.map(h => h.name ? h.name : h).join(' ');\n\n  if (!isDev) {\n    componentValue = useText(defaultValue);\n    componentHelperText = useText(helperText);\n  }\n\n  componentValue = isNaN(Number(componentValue)) ? componentValue : Number(componentValue); // maintain the type of the value\n\n  const getValue = val => isNaN(Number(val)) ? val : Number(val);\n\n  const [value, setValue] = useState(getValue(componentValue));\n  useEffect(() => {\n    setValue(getValue(componentValue));\n  }, [componentValue]);\n  const {\n    FormControl: MUIFormControl,\n    RadioGroup,\n    FormControlLabel: MUIFormControlLabel,\n    FormHelperText,\n    FormLabel,\n    Radio\n  } = window.MaterialUI.Core; // renders the radio component\n\n  const renderRadio = (optionValue, optionLabel) => <MUIFormControlLabel disabled={disabled} value={optionValue} control={<Radio size={size} />} label={optionLabel} labelPlacement={position} />;\n\n  const radioData = (radioOptions || '').split('\\n');\n  let Radios = radioData.map(option => renderRadio(option, option));\n\n  if (optionType === 'data') {\n    Radios = renderRadio('value', 'Placeholder');\n\n    if (!isDev) {\n      Radios = <GetAll modelId={model} filter={filter} skip={0} take={50}>\n            {({\n          loading,\n          error: err,\n          data\n        }) => {\n          if (loading) return <span>Loading...</span>;\n\n          if (err) {\n            return <span>Something went wrong: {err.message} :(</span>;\n          }\n\n          const {\n            results\n          } = data;\n          return results.map(item => renderRadio(item[valueProperty.name], item[labelProperty.name]));\n        }}\n          </GetAll>;\n    }\n  }\n\n  const handleChange = evt => {\n    setValue(getValue(evt.target.value));\n  };\n\n  const FormControl = <MUIFormControl className={classes.formControl} required={required} margin={margin} component=\"fieldset\" error={error}>\n        <FormLabel component=\"legend\">{label}</FormLabel>\n        <RadioGroup row={row} value={value} name={actionInput && actionInput.name} onChange={handleChange} aria-label={label}>\n          {Radios}\n        </RadioGroup>\n        <FormHelperText>{componentHelperText}</FormHelperText>\n      </MUIFormControl>;\n  return isDev ? <div className={classes.root}>{FormControl}</div> : FormControl;\n})()","styles":"() => () => ({\n  formControl: {\n    display: 'block'\n  },\n  root: {\n    '& > *': {\n      pointerEvents: 'none'\n    }\n  }\n})"},{"name":"Row","icon":"RowIcon","type":"BODY_COMPONENT","allowedTypes":["LAYOUT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"<div className={classes.container}>\n      {(() => {\n    const isEmpty = children.length === 0;\n    const isPristine = isEmpty && B.env === 'dev';\n    return <section className={[classes.row, isEmpty ? classes.empty : '', isPristine ? classes.pristine : ''].join(' ')}>\n            {isPristine ? 'Row' : children}\n          </section>;\n  })()}\n    </div>","styles":"B => theme => {\n  const style = new B.Styling(theme);\n  const width = {\n    Full: '100%',\n    XL: '1200px',\n    L: '960px',\n    M: '720px',\n    S: '540px'\n  };\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    container: {\n      width: '100%',\n      height: ({\n        options: {\n          rowHeight\n        }\n      }) => rowHeight || 'auto',\n      maxWidth: ({\n        options: {\n          maxRowWidth\n        }\n      }) => width[maxRowWidth],\n      backgroundColor: ({\n        options: {\n          backgroundColor\n        }\n      }) => backgroundColor === 'transparent' ? 'transparent' : style.getColor(backgroundColor),\n      backgroundImage: 'none',\n      backgroundPosition: 'left top',\n      backgroundRepeat: 'no-repeat',\n      backgroundSize: 'cover',\n      borderWidth: 0,\n      borderColor: 'transparent',\n      borderStyle: 'none',\n      borderRadius: 0,\n      boxSizing: 'border-box',\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing,\n          maxRowWidth\n        }\n      }) => maxRowWidth !== 'Full' ? 'auto' : getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing,\n          maxRowWidth\n        }\n      }) => maxRowWidth !== 'Full' ? 'auto' : getSpacing(outerSpacing[3]),\n      [`@media ${B.mediaMinWidth(768)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing,\n            maxRowWidth\n          }\n        }) => maxRowWidth !== 'Full' ? 'auto' : getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing,\n            maxRowWidth\n          }\n        }) => maxRowWidth !== 'Full' ? 'auto' : getSpacing(outerSpacing[3], 'Portrait')\n      },\n      [`@media ${B.mediaMinWidth(1024)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing,\n            maxRowWidth\n          }\n        }) => maxRowWidth !== 'Full' ? 'auto' : getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing,\n            maxRowWidth\n          }\n        }) => maxRowWidth !== 'Full' ? 'auto' : getSpacing(outerSpacing[3], 'Landscape')\n      },\n      [`@media ${B.mediaMinWidth(1200)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing,\n            maxRowWidth\n          }\n        }) => maxRowWidth !== 'Full' ? 'auto' : getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing,\n            maxRowWidth\n          }\n        }) => maxRowWidth !== 'Full' ? 'auto' : getSpacing(outerSpacing[3], 'Desktop')\n      }\n    },\n    row: {\n      display: 'flex',\n      height: '100%',\n      flexWrap: 'wrap',\n      justifyContent: 'flex-start',\n      boxSizing: 'border-box'\n    },\n    empty: {\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: ({\n        options: {\n          rowHeight\n        }\n      }) => rowHeight ? 0 : '4rem',\n      height: '100%',\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase'\n    },\n    pristine: {\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5'\n    }\n  };\n}"},{"name":"Select","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    label,\n    required,\n    disabled,\n    defaultValue,\n    variant,\n    size,\n    fullWidth,\n    hasError,\n    margin,\n    helperText,\n    selectOptions,\n    model,\n    filter,\n    optionType,\n    property,\n    valueProperty: valueProp,\n    actionInputId\n  } = options;\n  const {\n    TextField,\n    MenuItem\n  } = window.MaterialUI.Core;\n  const isDev = B.env === 'dev';\n  const {\n    GetAll,\n    getProperty,\n    getActionInput,\n    useText\n  } = B;\n  const [currentValue, setCurrentValue] = isDev ? useState(defaultValue.join(' ')) : useState(useText(defaultValue));\n  const helper = isDev ? helperText.map(h => h.name ? h.name : h).join(' ') : useText(helperText);\n  const actionInput = getActionInput(actionInputId);\n  const value = currentValue;\n  const labelProperty = getProperty(property);\n  const valueProperty = getProperty(valueProp);\n  const {\n    name: propName\n  } = valueProperty || {};\n  const {\n    name: labelName\n  } = labelProperty || {};\n\n  const handleChange = event => {\n    const {\n      target: {\n        value: eventValue\n      }\n    } = event;\n    setCurrentValue(eventValue);\n  };\n\n  const SelectCmp = optionType === 'static' ? <TextField select value={isDev ? defaultValue.map(textitem => textitem.name ? textitem.name : textitem).join(' ') : value} size={size} variant={variant} fullWidth={fullWidth} onChange={handleChange} inputProps={{\n    name: actionInput && actionInput.name\n  }} required={required} disabled={disabled} label={label} error={hasError} margin={margin} helperText={helper}>\n          {(selectOptions || '').split('\\n').map(option => <MenuItem key={option} value={option}>\n              {option}\n            </MenuItem>)}\n        </TextField> : <GetAll modelId={model} filter={filter} skip={0} take={50}>\n          {({\n      loading,\n      error,\n      data\n    }) => {\n      if (loading) {\n        return <span>Loading...</span>;\n      }\n\n      if (error) {\n        return <span>Something went wrong: {error.message} :(</span>;\n      }\n\n      const {\n        results\n      } = data;\n      return <TextField select defaultValue={value} value={value} size={size} variant={variant} fullWidth={fullWidth} onChange={handleChange} inputProps={{\n        name: actionInput && actionInput.name\n      }} required={required} disabled={disabled} label={label} error={hasError} margin={margin} helperText={helper}>\n                {results.map(item => propName && labelName && <MenuItem key={item.id} value={item[propName]}>\n                        {item[labelName]}\n                      </MenuItem>)}\n              </TextField>;\n    }}\n        </GetAll>;\n  return isDev ? <div className={classes.root}>{SelectCmp}</div> : SelectCmp;\n})()","styles":"() => () => ({\n  root: {\n    display: ({\n      options: {\n        fullWidth\n      }\n    }) => fullWidth ? 'block' : 'inline-block',\n    '& > *': {\n      pointerEvents: 'none'\n    }\n  }\n})"},{"name":"Tab","type":"TAB_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"VERTICAL","jsx":"(() => {\n  const {\n    Typography,\n    Box\n  } = window.MaterialUI.Core;\n  const isDev = B.env === 'dev';\n  const {\n    value\n  } = parent;\n  const isActive = value === index;\n  const TabPanel = (isActive || !isDev) && <Typography component=\"div\" role=\"tabpanel\" hidden={!isActive} aria-labelledby=\"tabs\">\n        {isActive && <Box className={isDev && children.length === 0 && classes.empty} p={3}>\n            {children.length === 0 ? 'Tab' : children}\n          </Box>}\n      </Typography>;\n  return isDev ? <div>{TabPanel}</div> : TabPanel;\n})()","styles":"() => () => ({\n  empty: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: '4rem',\n    fontSize: '0.75rem',\n    color: '#262A3A',\n    textTransform: 'uppercase',\n    boxSizing: 'border-box',\n    borderWidth: '0.0625rem',\n    borderColor: '#AFB5C8',\n    borderStyle: 'dashed',\n    backgroundColor: '#F0F1F5'\n  }\n})"},{"name":"Tabs","type":"CONTENT_COMPONENT","allowedTypes":["TAB_COMPONENT"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    Tabs,\n    Tab\n  } = window.MaterialUI.Core;\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    Children,\n    env\n  } = B;\n  const {\n    defaultValue,\n    variant,\n    centered,\n    orientation,\n    scrollButtons\n  } = options;\n  const isDev = env === 'dev';\n  const [value, setValue] = useState(parseInt(defaultValue - 1, 10) || 0);\n  const devValue = parseInt(defaultValue - 1, 10) || 0;\n  const currentValue = isDev ? devValue : value;\n\n  const handleChange = (_, newValue) => {\n    setValue(newValue);\n  };\n\n  const TabGroup = <div className={classes.tabs}>\n        <Tabs aria-label=\"tabs\" onChange={handleChange} value={currentValue} variant={variant} centered={centered} orientation={orientation} scrollButtons={scrollButtons} classes={{\n      root: classes.root,\n      indicator: classes.indicator\n    }}>\n          {React.Children.map(children, (child, index) => {\n        const {\n          options\n        } = child.props;\n        const {\n          label,\n          icon,\n          disabled,\n          disableRipple\n        } = isDev ? {} : options;\n        return <Tab label={isDev ? `Tab ${index + 1}` : label} icon={icon && icon !== 'None' ? React.createElement(Icons[icon]) : undefined} disabled={disabled} disableRipple={disableRipple} />;\n      })}\n        </Tabs>\n        <Children value={currentValue}>{children}</Children>\n      </div>;\n  return isDev ? <div className={[classes.wrapper, children.length === 0 && classes.empty].join(' ')}>\n        {children.length === 0 ? 'Tabs' : TabGroup}\n      </div> : TabGroup;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n  return {\n    wrapper: {\n      '& .MuiTabs-flexContainer > button': {\n        pointerEvents: 'none'\n      }\n    },\n    tabs: {\n      display: 'flex',\n      flexDirection: ({\n        options: {\n          orientation\n        }\n      }) => orientation === 'horizontal' ? 'column' : 'row'\n    },\n    root: {\n      backgroundColor: ({\n        options: {\n          appBarColor\n        }\n      }) => [style.getColor(appBarColor), '!important'],\n      color: ({\n        options: {\n          textColor\n        }\n      }) => [style.getColor(textColor), '!important']\n    },\n    indicator: {\n      backgroundColor: ({\n        options: {\n          indicatorColor\n        }\n      }) => [style.getColor(indicatorColor), '!important']\n    },\n    empty: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: '4rem',\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase',\n      boxSizing: 'border-box',\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5'\n    }\n  };\n}"},{"name":"Text","icon":"HeadingIcon","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const Tag = {\n    Title1: 'h1',\n    Title2: 'h2',\n    Title3: 'h3',\n    Title4: 'h4',\n    Title5: 'h5',\n    Title6: 'h6',\n    Body1: 'p',\n    Body2: 'p'\n  }[options.type || 'Body1'];\n  return <Tag className={classes.content}>\n        {options.content.length > 0 && <B.Text value={options.content} />}\n        {options.content.length === 0 && B.env === 'dev' && <span className={classes.placeholder}>Empty content</span>}\n      </Tag>;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    content: {\n      display: 'block',\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      textAlign: ({\n        options: {\n          textAlignment\n        }\n      }) => textAlignment,\n      padding: 0,\n      whiteSpace: 'pre-wrap',\n      color: ({\n        options: {\n          type\n        }\n      }) => style.getFontColor(type),\n      fontFamily: ({\n        options: {\n          type\n        }\n      }) => style.getFontFamily(type),\n      fontSize: ({\n        options: {\n          type\n        }\n      }) => style.getFontSize(type),\n      fontWeight: ({\n        options: {\n          type\n        }\n      }) => style.getFontWeight(type),\n      textTransform: ({\n        options: {\n          type\n        }\n      }) => style.getTextTransform(type),\n      letterSpacing: ({\n        options: {\n          type\n        }\n      }) => style.getLetterSpacing(type),\n      [`@media ${B.mediaMinWidth(768)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Portrait'),\n        fontSize: ({\n          options: {\n            type\n          }\n        }) => style.getFontSize(type, 'Portrait')\n      },\n      [`@media ${B.mediaMinWidth(1024)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Landscape'),\n        fontSize: ({\n          options: {\n            type\n          }\n        }) => style.getFontSize(type, 'Landscape')\n      },\n      [`@media ${B.mediaMinWidth(1200)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Desktop'),\n        fontSize: ({\n          options: {\n            type\n          }\n        }) => style.getFontSize(type, 'Desktop')\n      }\n    },\n    placeholder: {\n      color: '#dadde4'\n    }\n  };\n}"},{"name":"TextField","icon":"TextInputIcon","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    label,\n    defaultValue,\n    required,\n    disabled,\n    error,\n    multiline,\n    rows,\n    placeholder,\n    variant,\n    type,\n    size,\n    fullWidth,\n    margin,\n    helperText,\n    actionInputId,\n    adornment,\n    adornmentIcon,\n    adornmentPosition\n  } = options;\n  const {\n    TextField,\n    InputAdornment,\n    IconButton\n  } = window.MaterialUI.Core;\n  const {\n    Icons,\n    Icons: {\n      Visibility,\n      VisibilityOff\n    }\n  } = window.MaterialUI;\n  const {\n    getActionInput,\n    useText\n  } = B;\n  const isDev = B.env === 'dev';\n  const [currentValue, setCurrentValue] = isDev ? useState(defaultValue.join(' ')) : useState(useText(defaultValue));\n  const [showPassword, togglePassword] = useState(false);\n  const helper = isDev ? helperText.map(h => h.name ? h.name : h).join(' ') : useText(helperText);\n  const placeholderText = isDev ? placeholder.map(p => p.name ? p.name : p).join(' ') : useText(placeholder);\n  const actionInput = getActionInput(actionInputId);\n  const value = currentValue;\n\n  const changeHandler = event => {\n    const {\n      target: {\n        value: eventValue\n      }\n    } = event;\n    setCurrentValue(eventValue);\n  };\n\n  const handleClickShowPassword = () => {\n    togglePassword(!showPassword);\n  };\n\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n\n  const adornmentCmp = adornmentIcon && adornmentIcon !== 'none' ? <IconButton>\n          {React.createElement(Icons[adornmentIcon], {\n      fontSize: size\n    })}\n        </IconButton> : adornment;\n  let InputAdornmentCmp = adornmentCmp && {\n    [`${adornmentPosition}Adornment`]: <InputAdornment position={adornmentPosition}>\n          {adornmentCmp}\n        </InputAdornment>\n  };\n\n  if (adornment && type === 'password') {\n    InputAdornmentCmp = {\n      [`${adornmentPosition}Adornment`]: <InputAdornment position={adornmentPosition}>\n            <IconButton aria-label=\"toggle password visibility\" onClick={handleClickShowPassword} onMouseDown={handleMouseDownPassword}>\n              {showPassword ? <Visibility /> : <VisibilityOff />}\n            </IconButton>\n          </InputAdornment>\n    };\n  }\n\n  const TextFieldCmp = <TextField name={actionInput && actionInput.name} value={isDev ? defaultValue.map(textitem => textitem.name ? textitem.name : textitem).join(' ') : value} size={size} variant={variant} placeholder={placeholderText} fullWidth={fullWidth} type={isDev && type === 'number' || showPassword ? 'text' : type} onChange={changeHandler} InputProps={{\n    inputProps: {\n      name: actionInput && actionInput.name\n    },\n    ...InputAdornmentCmp\n  }} required={required} disabled={disabled} multiline={multiline} rows={rows} label={label} error={error} margin={margin} helperText={helper} />;\n  return isDev ? <div className={classes.root}>{TextFieldCmp}</div> : TextFieldCmp;\n})()","styles":"() => () => ({\n  root: {\n    display: ({\n      options: {\n        fullWidth\n      }\n    }) => fullWidth ? 'block' : 'inline-block',\n    '& > *': {\n      pointerEvents: 'none'\n    }\n  }\n})"}]
